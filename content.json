{"meta":{"title":"MTFTau-5的小站","subtitle":"MTFTau-5的个人博客，佳代子单推人（佳门）","description":"","author":"MTFTau-5","url":"https://mtftau-5.github.io","root":"/"},"pages":[{"title":"","date":"2025-05-31T12:01:12.055Z","updated":"2025-05-31T12:01:12.055Z","comments":true,"path":"music.json","permalink":"https://mtftau-5.github.io/music.json","excerpt":"","text":"[{\"name\":\"Ave Mujica - 顔\",\"artist\":\"未知\",\"url\":\"/music/Ave Mujica - 顔.flac\",\"cover\":\"\"},{\"name\":\"MyGO!!!!! - 焚音打\",\"artist\":\"未知\",\"url\":\"/music/MyGO!!!!! - 焚音打.flac\",\"cover\":\"\"},{\"name\":\"精神電鋸\",\"artist\":\"未知\",\"url\":\"/music/かいりきベア_初音ミク - メンタルチェンソー (精神電鋸) (精神電鋸) (Single Version).ogg\",\"cover\":\"\"},{\"name\":\"『バッハの旋律を夜に聴いたせいです。』 (“都是因为晚上听了巴赫的旋律。”)\",\"artist\":\"未知\",\"url\":\"/music/sakanaction (サカナクション) - 『バッハの旋律を夜に聴いたせいです。』 (“都是因为晚上听了巴赫的旋律。”).ogg\",\"cover\":\"\"},{\"name\":\"宇宙香料\",\"artist\":\"未知\",\"url\":\"/music/ピノキオピー (匹諾曹P) - コスモスパイス (宇宙香料).flac\",\"cover\":\"\"},{\"name\":\"ちっちゃな私 (小小的我)\",\"artist\":\"未知\",\"url\":\"/music/重音テト _ マサラダ - ちっちゃな私 (小小的我) (小小的我).ogg\",\"cover\":\"\"},{\"name\":\"愛♡スクリ～ム\",\"artist\":\"未知\",\"url\":\"/music/AiScReam - 愛♡スクリ～ム!.flac\",\"cover\":\"\"},{\"name\":\"春嵐\",\"artist\":\"未知\",\"url\":\"/music/john - 春嵐.flac\",\"cover\":\"\"},{\"name\":\"Your Reality (Remix) \",\"artist\":\"未知\",\"url\":\"/music/Android233 _ CG5 - Your Reality (Remix).ogg\",\"cover\":\"\"},{\"name\":\"Journey To The Rainbows (Rizline Edit)\",\"artist\":\"未知\",\"url\":\"/music/Ardolf - Journey To The Rainbows (Rizline Edit).ogg\",\"cover\":\"\"},{\"name\":\"eat Eater (Single Version)\",\"artist\":\"未知\",\"url\":\"/music/初音未来_ポリスピカデリー (Police Piccadilly) - Beat Eater (Single Version).ogg\",\"cover\":\"\"},{\"name\":\"パノプティコン 2021 (Panopticon／圆形监狱)\",\"artist\":\"未知\",\"url\":\"/music/r-906 - パノプティコン 2021 (Panopticon／圆形监狱).flac\",\"cover\":\"\"},{\"name\":\"Empty Love\",\"artist\":\"未知\",\"url\":\"/music/Lulleaux _ Kid Princess - Empty Love.flac\",\"cover\":\"\"}]"},{"title":"音乐","date":"2025-05-31T13:42:05.724Z","updated":"2025-05-31T13:42:05.724Z","comments":true,"path":"music/index.html","permalink":"https://mtftau-5.github.io/music/index.html","excerpt":"","text":"const basePath = window.location.host.includes('github.io') ? '/博客仓库名' : ''; fetch(`/music.json`) .then(response => { if (!response.ok) throw new Error('音乐列表加载失败，请检查 music.json 路径'); return response.json(); }) .then(musicList => { new APlayer({ container: document.getElementById('music-player'), theme: '#F57474', loop: 'all', listFolded: false, audio: musicList.map(file => ({ name: file.name.replace(/\\.[^/.]+$/, ''), artist: file.artist || '未知', url: `${file.url}`, cover: `${basePath}${file.cover || '/images/default-cover.jpg'}` })) }); }) .catch(error => { console.error('错误:', error); document.getElementById('music-player').innerHTML = `播放器加载失败: ${error.message}`; });"},{"title":"tags","date":"2025-05-31T04:07:55.000Z","updated":"2025-05-31T04:07:55.365Z","comments":true,"path":"tags/index.html","permalink":"https://mtftau-5.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"linux配置集合","slug":"linux基本配置集合","date":"2025-06-05T03:04:44.000Z","updated":"2025-06-05T04:02:52.121Z","comments":true,"path":"2025/06/05/linux基本配置集合/","permalink":"https://mtftau-5.github.io/2025/06/05/linux%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E9%9B%86%E5%90%88/","excerpt":"作为一个老linuxer（用deb系居多）用户了，面对linux的系统配置的时候又是依然痛不欲生，所以这里归档一下我的Linux配置设置以方便日后使用。","text":"作为一个老linuxer（用deb系居多）用户了，面对linux的系统配置的时候又是依然痛不欲生，所以这里归档一下我的Linux配置设置以方便日后使用。 初始配置 更换源 首先换镜像源的是必备的，鉴于Ubuntu还有他的孩子们都有图形化，这里就不用过多赘述。面对没有镜像源图形化切换的发行版，这里给出dabian的修改示例 1sudo nano /etc/apt/sources.list #修改源文件 我用的是中科大源 12345678deb https://mirrors.ustc.edu.cn/debian/ bookworm main non-free non-free-firmware contribdeb-src https://mirrors.ustc.edu.cn/debian/ bookworm main non-free non-free-firmware contribdeb https://mirrors.ustc.edu.cn/debian-security/ bookworm-security maindeb-src https://mirrors.ustc.edu.cn/debian-security/ bookworm-security maindeb https://mirrors.ustc.edu.cn/debian/ bookworm-updates main non-free non-free-firmware contribdeb-src https://mirrors.ustc.edu.cn/debian/ bookworm-updates main non-free non-free-firmware contribdeb https://mirrors.ustc.edu.cn/debian/ bookworm-backports main non-free non-free-firmware contribdeb-src https://mirrors.ustc.edu.cn/debian/ bookworm-backports main non-free non-free-firmware contrib 1sudo apt update 配置显卡驱动 第一种方法：run文件安装 只能说黄狗给的run文件虽然难用但是至少给了（苦笑） 网站链接：(https://www.nvidia.cn/drivers/lookup/)，在页面表单上输入具体的型号，然后由网页待到下载界面。搜素奥自己的显卡型号。 安装的时候最好进入root模式。 首先安装一下必要组件 1apt -y install linux-headers-$(uname -r) build-essential libglvnd-dev pkg-config 禁用内核更新 1dpkg --get-selections | grep linux-(image|headers) 禁用开源原生驱动 123echo &quot;blacklist nouveau&quot; &gt;&gt; /etc/modprobe.d/blacklist.confecho &quot;options nouveau modeset=0&quot; &gt;&gt; /etc/modprobe.d/blacklist.confupdate-initramfs -u 将结果里的linux-image和linux-headers固定版本，例如: 1apt-mark hold linux-image-你的版本号-amd64 linux-headers-你的版本号 linux-headers-你的版本号-common 安装驱动 给它转为可执行文件 1chmod u+x NVIDIA-Linux-你的版本号.run 执行文件 1./NVIDIA-Linux-x86_64-470.256.02.run 安装过程紧跟脚步最后重启 1reboot 或者你可以直接从仓库下载 1sudo apt install nvidia 第二种方法：仓库安装(ubuntu为例子，反正deb系的软件源各种嫁接大法不少见，ubuntu源用在dabian也不少见（笑）) 添加ppa源 1sudo add-apt-repository ppa:graphics-drivers/ppa 安装依赖 1sudo apt-get install dkms build-essential 寻找版本 1ubuntu-drivers devices 按照给出的版本安装 1sudo ubuntu-drivers autoinstall 重启 1sudo reboot linux美化（提一嘴） 我懂我都懂，linux美化是不得不品的一环（linux社区二次元们的莫名的执念） 一般美化 鉴于grub主题等都有现成的网站我就不过多赘述，我这里推荐一个登陆界面美化插件 https://github.com/PRATAP-KUMAR/gse-gdm-extension （超好用） 终端美化 终端个人推荐使用zsh，主题使用powerlevel10k，插件仅需zsh-autosuggestions与zsh-syntax-highlighting即可。 配置可参照:https://www.haoyep.com/posts/zsh-config-oh-my-zsh/ python配置 anaconda死一死，司马慢 建议用venv，pip，真有需要可用minconda。 在这里pip换源可以用清华源 12python -m pip install --upgrade pippip config set global.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple 然后你就下载自己所需要的轮子吧 这就是我的linux配置了，就这样。","categories":[],"tags":[{"name":"linux系统配置","slug":"linux系统配置","permalink":"https://mtftau-5.github.io/tags/linux%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"}]},{"title":"VAE学习笔记与感悟","slug":"VAE简述","date":"2025-06-01T03:47:03.000Z","updated":"2025-06-01T07:46:56.571Z","comments":true,"path":"2025/06/01/VAE简述/","permalink":"https://mtftau-5.github.io/2025/06/01/VAE%E7%AE%80%E8%BF%B0/","excerpt":"VAE作为AE与扩散模型的承前启后的模型网络，重要性不言而喻。笔者在这里写一个关于VAE的简述来总结一下自己的感悟吧","text":"VAE作为AE与扩散模型的承前启后的模型网络，重要性不言而喻。笔者在这里写一个关于VAE的简述来总结一下自己的感悟吧 一，模型构成 一般来说，VAE模型由encoder和decoder构成。前者负责学习，后者负责练习。也就是说VAE通过encoder对输入的信息进行解析变换并学习里面的主要特征（例如图像），在decoder中进行重建并进行图像重构然后将重构的图形与原来的图像比较计算相似度然后反向传播更改参数权重再进行下一步练习。 那么他的训练原理是什么呢？ VAE把人脸的各个部分进行独立建模，他引入了一个先验就是各个部分的信息应当符合高斯分布，模型只需要学习最主要的特征就可以了。很明显这样就可以避免很多噪声（你总不能眼睛部位分析出嘴巴的特征吧）。就跟眼睛的大小一样，一般模型会对这些特征进行一个量化，然后指出笑得时候眼睛长什么样，哭的时候眼睛什么样等等等等。而变分自编码器便是用取值的概率分布代替原先的单值来描述对特征的观察的模型，如下图的右边部分所示，经过变分自编码器的编码，每张图片的微笑特征不再是自编码器中的单值而是一个概率分布。 那样我们把这个概率输入到decoder里面去进行重构那就更加符合统计学原理了不是吗？ 也就是说我们在隐空间进行了一个处理学习了他们的特征的概率分布（符合高斯分布）然后在进行图像重构等一系列操作。 二，数学原理 先扔出一张图(网上找的) 如图，首先他将一整个数据进行离散化各自计算它们的高斯分布特征 这里需要约束他们让他们强制符合正态分布 $$p(z) = \\mathcal{N}(z \\mid 0, I) = \\frac{1}{(2\\pi)^{d/2}} \\exp\\left(-\\frac{1}{2} z^T z\\right)$$ 这个公式保证VAE对隐变量z施加的先验分布，假设其服从多维标准正态分布（均值为 0，协方差为单位矩阵）让概率生成更加精准。 在你得出正态分布之后他会进入Z的隐空间再进行采样进入decoder。此时decoder使用 qϕ(z ∣ x) = 𝒩(z ∣ μϕ(x), σϕ2(x)I) 在这里，我们的μϕ(x)和ϕ(x)2是从encoder传过来的，decoder用这个重建概率分布并进行采样。 但是仅仅学习分布还不够，我们还要加强他的鲁棒性，这时候我们的老炼丹师们都会想到数据增强里面的添加噪声。没错，我们的研究者们也是这么想的 z = μϕ(x) + σϕ(x) ⋅ ϵ, ϵ ∼ 𝒩(0, I) 将随机采样过程分解为确定性变换和噪声注入，因为正态分布本身是𝒩(z|0, I)的，那我从固定分布 ((0, I)) 采样噪声 ()不就好了，然后还进行缩放和平移。保证了过程可微分，允许通过梯度下降优化编码器参数 () 最后再进行一次约束，因为你需要把结果和最开始进行对比，所以你需要比较先验与后验的区别。 $$D_{\\text{KL}}\\left(q_\\phi(z \\mid x) \\, \\middle\\| \\, p(z)\\right) = \\frac{1}{2} \\sum_{j=1}^d \\left( \\exp\\left(\\log \\sigma_j^2(x)\\right) + \\mu_j^2(x) - 1 - \\log \\sigma_j^2(x) \\right)$$ 衡量近似后验 (q_(z|x)) 与先验 (p(z)) 的差异。优化目标：最小化KL散度，强制编码器生成的隐变量接近标准正态分布。 最重要的优化函数是什么呢？ $$\\mathbb{E}_{q_\\phi(z|x)} [\\log p_\\theta(x|z)] \\approx \\frac{1}{L} \\sum_{l=1}^L \\log p_\\theta(x|z^{(l)}), \\quad z^{(l)} \\sim q_\\phi(z|x)$$ 以及总公式 ℒ(θ, ϕ; x) = 𝔼qϕ(z|x)[log pθ(x|z)] − DKL(qϕ(z|x)∥p(z)) 吼吼吼，变分下界来喽，他最大化重构概率（左项），同时约束隐变量分布接近先验（右项） 详细解释一下吧，左边的是重构部分(也就是公式1)，右边是正则部分（也就是上一个公式），左边是测量到底模型能否按照根据隐变量 z 准确还原输入 x ，也就是衡量decoder能力。 正则化就跟我之前说的一样，最小化编码器输出的隐变量分布 (q_(z|x)) 与预设先验分布 (p(z))（如标准正态分布 ((0, I))）的差异，使隐空间具备结构化和泛化能力。也就是优化encoder能力。 通俗一点就是重构项：要求每本书（输入 x）都能被精确编码为条形码（隐变量 z），且能通过条形码完全还原书的内容。 正则化项：要求条形码的编码方式必须遵循特定规则（如正态分布），确保图书馆管理员（解码器）能根据随机生成的条形码创造合理的新书。 由此我们算是完整过了一遍模型数学基础了。 三，参考网址与学习资料 一文理解变分自编码器（VAE） 变分自编码器 VAE 超详解，从简单公式推导到模型结构到模型理解 VAE模型简析和精要（原理和代码）","categories":[],"tags":[{"name":"人工智能","slug":"人工智能","permalink":"https://mtftau-5.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"中北信息与计算科学存活指北","slug":"中北信息与计算科学存活指北","date":"2025-06-01T03:45:42.000Z","updated":"2025-06-05T03:57:35.319Z","comments":true,"path":"2025/06/01/中北信息与计算科学存活指北/","permalink":"https://mtftau-5.github.io/2025/06/01/%E4%B8%AD%E5%8C%97%E4%BF%A1%E6%81%AF%E4%B8%8E%E8%AE%A1%E7%AE%97%E7%A7%91%E5%AD%A6%E5%AD%98%E6%B4%BB%E6%8C%87%E5%8C%97/","excerpt":"","text":"专业要求(专业) 具体专业要求可以在中北数院官网查到（自己去下载） 大家可以做什么数据挖掘、机器学习、深度学习、自然语言处理、计算机视觉、机器人、智能系统等方向的项目 也可以做一些其他的项目（不限于八院） 因为数学+其他专业是王炸 积极拓宽自己的知识面 那样就可以在理论和工程上都有不错的成绩 推荐数模赛 他可以让你养成一种工科思维 很有利于跨专业的学习 希望大家都能取得好成绩 也祝大家想保研的顺利保研 有关学校培养资料 实验室(实验室) 这里是A413实验室人工智能方向成员，数学系信息与计算科学专业学生 如果有对数学应用、人工智能、机器学习等感兴趣的同学，欢迎加入我们 （广告就此打住） 实验室学技术很好，有好多专门的机器 但是不仅你需要选拔 还需要你耗费大量的时间去学习这个有可能跟你学得东西不相关的东西 有可能这会让你的保研之路变得更加艰难 因为技术和绩点是互相矛盾的 你学技术会耗费大量时间，而绩点会因此下降 如果你想保研，建议还是先把绩点搞上去 如果你想学技术，可以加入实验室 而且实验室会让你的比赛之旅变得更加轻松 如上 生活(生活) 宿舍冬冷夏热，体验原始风格 餐厅害人不浅，拉屎怀疑人生 学长已经被最近的大半夜宿舍温度30度热傻了 吃饭吃进医院两次了 更可恶的是他么的不仅教室没风扇没空调 宿舍也是 只能说锻炼军工精神了 高中的风扇不要丢，带到大学，可以再买一个大的，勉强够用 上厕所尽量去教学楼，宿舍的会让你看到不可直视之物 学校会给你安排很长时间的早操（6.00-10.00） 如果你不评优不评奖，那你可以无视这个规则 如果你感觉迷茫，可以去a413找那个桌子上有阿米娅的位置 他会帮你疏通（这是别人留言，详情请看我的github库） 活动（学校活动） 如果没有保研评奖活动。爱去去不愿去就不去。没有用处 不如把时间留下来提升自己呢。","categories":[],"tags":[{"name":"学校生活","slug":"学校生活","permalink":"https://mtftau-5.github.io/tags/%E5%AD%A6%E6%A0%A1%E7%94%9F%E6%B4%BB/"}]},{"title":"高维空间的SGD适用性问题","slug":"高维空间的SGD适用性问题","date":"2025-05-31T05:43:47.000Z","updated":"2025-05-31T08:52:57.852Z","comments":true,"path":"2025/05/31/高维空间的SGD适用性问题/","permalink":"https://mtftau-5.github.io/2025/05/31/%E9%AB%98%E7%BB%B4%E7%A9%BA%E9%97%B4%E7%9A%84SGD%E9%80%82%E7%94%A8%E6%80%A7%E9%97%AE%E9%A2%98/","excerpt":"在低维空间，往往SGD（随机梯度下降）会有一个尴尬的处境就是会落入局部最优解（因为它基于GD即梯度下降法），但是在高维空间会这样吗？？？","text":"在低维空间，往往SGD（随机梯度下降）会有一个尴尬的处境就是会落入局部最优解（因为它基于GD即梯度下降法），但是在高维空间会这样吗？？？ 一、高维空间的优化特性：局部最优解的“消失” 在低维空间中，目标函数（如神经网络的损失函数）常存在大量尖锐的局部最优解（可以理解为在最低点之前存在一个类似于二次函数的最低点一样的存在但是他的最低点更小），SGD容易被困其中。但在高维空间（如深度学习中常见的百万级参数空间），理论和实践表明： 1. 局部最优解的结构变化 高维空间中，局部最优解的数量可能随维度呈指数增长，但绝大多数局部最优解的梯度接近零（近似平稳点），且目标函数值与全局最优解相差无几。 通俗理解可以是说梯度下降法本身的要求是目标朝着偏导数求小于零的方向前进，在二维空间存在一个偏导数，三维有两个… 以此类推n维空间将会有n-1个偏导数。你该如何保证些偏导数全部小于零？也就是说在绝对高维空间（矩阵满秩且秩足够大）的情况下，存在一个全部偏导数小于零的方向几乎不可能。 1. SGD的内在噪声机制 我们从GD公式看起： 批量梯度下降（Batch Gradient Descent）更新公式： θt + 1 = θt − η ⋅ ∇θJ(θ) 其中： θ: 模型参数 η: 学习率 ∇θJ(θ): 损失函数对所有样本的梯度均值 随机梯度下降（Stochastic Gradient Descent）更新公式： θt + 1 = θt − η ⋅ ∇θJi(θ) 其中： Ji(θ): 第i个样本的损失函数 我们可以看出GD本身仅仅有一个偏导与下降的过程，到达临界点后悔直接卡住。 而SGD则会对批次进行梯度计算，这引入了噪声，保证了他逃离高维空间最致命的位置鞍点的动力。 二，SGD的面对平坦与病态条件的致命缺点 接近最优点时候收敛满而且跟老年人手抖一样不稳定 噪声的存在让他一点一点挪动出鞍点，但是他的客观存在也让他在最低点左右开始摇摆，难以逼近最优点。同时由于他高度依赖学习率，他的调参可以说是炼丹师的噩梦： 学习率小了效果差收敛慢 学习率大了容易步子大了扯到蛋（震荡太大不稳定） 炼丹师们以调一个不吱声。 高度依赖数据的本身性质，极易被影响 如果这个数据有过于平坦的位置和过于陡峭的位置，那他就会在陡峭的位置一下子冲下来，在平坦的位置稳定的不能再稳定（图灵停机：老爷爷（指炼丹师），我来给你踩背来喽~） 这就导致了SGD一些情况下的极其不稳定 ​​可能会“陷”在高原（平坦区域）或缓坡上： ​虽然从理论上讲，严格局部最优点几乎不存在，但SGD在这些区域的移动极其缓慢，梯度估计的噪声无法提供足够有力的方向指引，使得优化过程看似“停滞”。这在实际效果上非常类似于陷入局部最优，训练损失长时间几乎不变。而且缺乏有效的驱动力：​​ 标准SGD没有内在的机制来加速在平坦区域的搜索或驱动自己离开这些区域。 三，总结： 在高维空间中，SGD​​理论上​​具有避免严格局部最优的优势（因高维临界点多为可通过噪声逃离的鞍点），且其小批量计算的特性带来了​​计算效率和内存友好性​​。然而，​​实践中​​，其固有噪声导致收敛后期震荡剧烈、速度缓慢；对病态曲率（如狭长山谷）极度敏感，易陷入缓坡或高原停滞；且​​高度依赖手动精细调整学习率和批大小​​。因此，虽然SGD作为基础算法在高维优化中依然可行并存在理论保障，但其实际效率、稳定性和易用性的​​显著缺陷​​使其在深度学习等领域通常​​被更先进的优化器（Adam真是我爹）取代​​，后者通过动量或自适应学习率机制更有效地克服了高维空间的挑战。","categories":[],"tags":[{"name":"人工智能","slug":"人工智能","permalink":"https://mtftau-5.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"world'","slug":"world","date":"2025-05-31T03:43:19.000Z","updated":"2025-05-31T03:46:51.949Z","comments":true,"path":"2025/05/31/world/","permalink":"https://mtftau-5.github.io/2025/05/31/world/","excerpt":"","text":"上传初测式 看看能不能用","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2025-05-31T03:27:52.836Z","updated":"2025-05-31T03:27:52.838Z","comments":true,"path":"2025/05/31/hello-world/","permalink":"https://mtftau-5.github.io/2025/05/31/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"linux系统配置","slug":"linux系统配置","permalink":"https://mtftau-5.github.io/tags/linux%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"name":"人工智能","slug":"人工智能","permalink":"https://mtftau-5.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"学校生活","slug":"学校生活","permalink":"https://mtftau-5.github.io/tags/%E5%AD%A6%E6%A0%A1%E7%94%9F%E6%B4%BB/"}]}